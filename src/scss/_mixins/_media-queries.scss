// media queries
//
// @param @required {Map} $args ($from: _, $to: _, $media-type: _, $expression: _, $breakpoints: _)
// @param {String, cssValue} $media-type - screen 기본
// @param {Number, cssValue} $from min-width
// @param {Number, cssValue} $to max-width
// @param {Map} $expression
// @param {Map} $breakpoints
// @example
//     selector {
//         width: 500px;
//         @include media-queries($to: 'sm') {
//             width: 300px;
//         }
//     }

@function first-index($string, $direction: 'left') {
    @for $i from 1 through str-length($string) {
        $index: if($direction == 'left', $i, -$i);

        @if str-slice($string, $index, $index) != ' ' {
            @return $index;
        }
    }

    @return 0;
}

@function trim($string) {
    @return str-slice(
        $string,
        first-index($string, 'left'),
        first-index($string, 'right')
    );
}

@function is-px($value) {
    @return (type-of($value) == 'number') and (str-index(inspect($value), px) != null);
}

@mixin media-queries($args...) {
    $args: keywords($args);
    $media-type: screen;
    $from: null;
    $has-from: false;
    $to: null;
    $has-to: false;
    $expression: null;
    $breakpoints: (
        mobile: 768px,
        tablet: 1024px,
        desktop: 1280px
    );
    $queries: '';

    @if map-has-key($args, 'media-type') {
        $media-type: map-get($args, 'media-type');
    }

    @if map-has-key($args, 'expression') {
        $expression: map-get($args, 'expression');
    }

    @if map-has-key($args, 'breakpoints') {
        $breakpoints: map-merge($breakpoints, map-get($args, 'breakpoints'));
    }

    @if map-has-key($args, 'from') {
        $from: map-get($args, 'from');

        @if map-has-key($breakpoints, $from) {
            $from: map-get($breakpoints, $from);
            $has-from: true;
        }
    }

    @if map-has-key($args, 'to') {
        $to: map-get($args, 'to');

        @if map-has-key($breakpoints, $to) {
            $to: map-get($breakpoints, $to);
            $has-to: true;
        }
    }

    $queries: $media-type;

    @if $from {
        @if $has-from and $has-to and is-px($from) {
            $from: $from + 1;
        }

        $queries: append($queries, "and (min-width: #{$from})", space);
    }

    @if $to {
        $queries: append($queries, "and (max-width: #{$to})", space);
    }

    @if $expression {
        @each $key, $value in $expression {
            @if $key == media-type {
                $queries: append($queries, ", #{$value}", space);
            } @else if $key == from {
                $expression-from: $value;

                @if map-has-key($breakpoints, $expression-from) {
                    $expression-from: map-get($breakpoints, $expression-from);
                }

                $queries: append($queries, "and (min-width: #{$expression-from})", space);
            } @else if $key == to {
                $expression-to: $value;

                @if map-has-key($breakpoints, $expression-to) {
                    $expression-to: map-get($breakpoints, $expression-to);
                }

                $queries: append($queries, "and (max-width: #{$expression-to})", space);
            } @else {
                $queries: append($queries, "and (#{$key}: #{$value})", space);
            }
        }
    }

    @media #{$queries} {
        @content;
    }
}